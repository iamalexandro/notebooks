Javascript course

##1 intro
to add script in html:
<script>
	alert("this is an alert");
</script>
or:
<script src="intro.js"></script>
Recomendacion:
agregarlo como src y al final de body para que lo cargue al final de a pagina 


##2 variables

var nombreVariable (no recomendado) (let si)

propmpt caja de texto con input similar a un JOption Input en Java
Ej: <script>prompt("Ingresa tu nombre","Valor");</script>
para mostrar datos y verificar en la pagina podemos utilizar

Alert o document.write(var); o console.log("texto prueba")
Para console.log es necesario abrir el inspeccionador de elementos
de nuestro navegador 

tip: para duplicar linea de codigo: Shift + Alt + Down/Up
concatenar texto: + ej --> Hola + ${name};

* Template Strings -> Interpolacion (`hola ${name}`)

Las Template Strings utilizan las comillas invertidas o backticks (` `) para delimitar sus contenidos, en vez de las tradicionales comillas simples o dobles de las cadenas de texto normales. Así que este es un ejemplo de cómo definir una Template String:

Una de las mejores características de las Template Strings es la interpolación de cadenas. En pocas palabras, la interpolación permite utilizar cualquier expresión válida de JavaScript (como por ejemplo la suma de dos variables) dentro de una cadena y obtener como resultado la cadena completa con la expresión evaluada.

Las partes variables de una Template String se denominan placeholders y utilizan la sintaxis ${ } para diferenciarse del resto de la cadena. Ejemplo:

// Sustitución simple de cadenas
var nombre = "Juan";
console.log(`¡Hola ${nombre}!`);
// resultado => "¡Hola Juan!"


##3 tipos de datos

numericos: no es necesario especificar que tipo de numero queremos asignarle a nuestra variable, basta con colocar var y javascript detectara que tipo de dato numerico sera almacenado (integer o float)
string: en javascript un salto de linea es \n, pero la usar document.write() en un </script> al ser un metodo de escritura html para hacer el salto de linea debe ser el salto de linea html osea <br> para un salto de linea en javascript con document.write() seria:
Ej: <script>document.write("Hola mi nombre es: " + "<br> + nombre");</script>
Dos formas de agregar comillas en un string "" en javascript son
1. document.write(" \" Nicola Di Candia \" ");  antecedido del \ lo que queramos exceptuar ene ste caso las comillas "
2. document.write(' "Nicola Di Candia" '); reemplazando comillas externas del texto por comillas unitarias ' '
objetos:
var objeto = {
color: "Black",
size: 12
}
boolean: var boolean = false;
Undefined: var nicola; no tiene definido que tipo de var es
Null: var num2 = 1; num2= null finalizamos la variable
NaN: Valor no valido 
Ej: var nombre = Nicola; console.log(nombre * 2);


##4 Arrays

arreglos: Se declaran 
var nombreArray = [];
var amigos = ["carlos", "andres", "santiago"];
		 0	    1	       2
console.log(Mi amigo: + amigos[2] + " es calidoso")
var amigos = ["Carlos"]
//Agregar al final
amigos[amigos.length] = "Nuevo Amigo"  or
amigos.push("Nuevo Amigo+");
//quitar del final 
amigos.pop();

##5 Arrays Properties
//Concatenar dos arrays
var arr1 = [1, 2, 3];
var arr2 = [4, 5, 6];
var arr3 = arr1.concat(arr2);
arr3 = [1, 2, 3, 4, 5, 6]
//Join agregar separadores a la hora de imprimir
document.write(amigos.join(" / "));
Ordenar: array.sort();
Descendente: array.reverse();


##6 Condicionales
funcionan igual que en java...
Topic: === para validar que son iguales Y del mismo tipo 
Ej: edad = 18
if(edad === "18"){
	false;
}else{ true;

##7 y 8 Loops
a diferencia de java no se coloca int a la variable i
//FOR
for (i=0; i<= 100; i++){
	console.log(i); continue/break
}
NOTA: continue se salta esa iteracion
      break rompe el flujo y se sale del ciclo
//WHILE
while(condition){
   </code>
}
//DO WHILE
do{
 </code>
  }while(condition)

NOTA: Scope (ambito) -> contexto que pertenece a un nombre dentro de un programa, Esto sirve para que se pueda volver a definir una variable con un mismo nombre en diferentes partes del programa sin que haya conflictos entre ellos.
Si declaras una variable dentro de un bloque esa variable no existira nunca fuera de ese bloque.

____________________________________________________________________

##9 Functions
function plus(n1, n2){
  return n1 + n2;
}

NOTA: Operador ternario

let adult = age >= 18 		--> condicional
	  ? 'You are adult' 		--> valor si es true
	  : 'You are a child'	--> valor si es falso

* Funciones declaradas como const (Buena practica)

	ej: const saludar = (persona) => {	
		console.log('Hello + ${persona}')
	}

* Funcion de Flecha -> para funciones de una linea
	
	ej: const sumar = (a,b) => a + b 

* Parametros y argumentos
Parametro -> son las variables que declaramos con nuestra funcion
Argumento -> el valor que toma esa variable al ejecutar la funcion 

* VALORES POR DEFECTO 
const saludar = (persona = 'visitante' , sexo = 'm'){
	return `hola ${persona}` ---> hola visitante
}

* Parametros REST (spread operator [...] ) -> recibir indeterminada cantidad de argumentos

eje:  const sumarTodos = (...numeros) => {
		
		console.log(numeros)
	
	}

* Funciones: Ciudadanos de primera clase -> es un VALOR

- Pueden ser almacenadas en variables o constantes
- Pueden ser pasadas como argumentos de otra funcion
- Pueden ser retornadas por otra funcion
- Pueden tener metodos o propiedades

* Base de clousure function que retornan functions 

ej: 	const sumar2 = (x) => (y) => x + y;
	let result2 = sumar2(1)(3);
	c(`El resultado de la suma2 es: ${result2}`);
* Tipos de Funciones 4.8

- Puras: no modifican nada de fuera de su bloque (no causa efectos secundarios en el codigo)
- Autoinvocadas: reciben enseguida los parametros y se invocan ellas mismas
-Anonimas: funciones sin nombre como por ejemplo setTimeout

* Conceptos clave -> Scope, clousure, callbacks, DOM
- Clousure: invocacion de una funcion dentro de otra 
- Scope: El scope es el alcance de una variable, puede ser de dos tipos, global y local.
- Callbacks: cuando una funcion es empleada como argumento de otra
- DOM (Document Object Model): 

____________________________________________________________________

##10 Forms and Functions
para crear un formulario:
<form action="">
    <input type="text" id="numero1">
    <input type="text" id="numero2">
</form>

NOTAS:

• match media

if (window.matchMedia("(max-width: 700px)").matches) {
  /* The viewport is less than, or equal to, 700 pixels wide */
} else {
  /* The viewport is greater than 700 pixels wide */
}

